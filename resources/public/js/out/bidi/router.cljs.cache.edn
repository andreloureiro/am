;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name bidi.router, :imports {History goog.History}, :requires {bidi bidi.bidi, bidi.bidi bidi.bidi, h goog.History, goog.History goog.History, e goog.events, goog.events goog.events, s clojure.string, clojure.string clojure.string, History goog.History}, :uses nil, :defs {Router {:meta {:file "/home/andre/Projects/ClojureScript/am/resources/public/js/out/bidi/router.cljs", :line 8, :column 14, :end-line 8, :end-column 20, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {set-location! [[_ location]], replace-location! [[_ location]]}}}, :protocol-symbol true, :name bidi.router/Router, :file "resources/public/js/out/bidi/router.cljs", :end-column 20, :column 1, :line 8, :protocol-info {:methods {set-location! [[_ location]], replace-location! [[_ location]]}}, :info nil, :end-line 8, :impls #{bidi.router/t_bidi$router47340 bidi.router/t_bidi$router47306}, :doc nil, :jsdoc ("@interface")}, set-location! {:protocol-inline nil, :meta {:file "/home/andre/Projects/ClojureScript/am/resources/public/js/out/bidi/router.cljs", :line 9, :column 4, :end-line 9, :end-column 17, :protocol bidi.router/Router, :doc nil, :arglists (quote ([_ location]))}, :protocol bidi.router/Router, :name bidi.router/set-location!, :variadic false, :file "resources/public/js/out/bidi/router.cljs", :end-column 17, :method-params ([_ location]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ location])), :doc nil}, replace-location! {:protocol-inline nil, :meta {:file "/home/andre/Projects/ClojureScript/am/resources/public/js/out/bidi/router.cljs", :line 10, :column 4, :end-line 10, :end-column 21, :protocol bidi.router/Router, :doc nil, :arglists (quote ([_ location]))}, :protocol bidi.router/Router, :name bidi.router/replace-location!, :variadic false, :file "resources/public/js/out/bidi/router.cljs", :end-column 21, :method-params ([_ location]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ location])), :doc nil}, start-router! {:protocol-inline nil, :meta {:file "/home/andre/Projects/ClojureScript/am/resources/public/js/out/bidi/router.cljs", :line 12, :column 7, :end-line 12, :end-column 20, :arglists (quote ([routes {:keys [on-navigate default-location], :or {on-navigate (constantly nil)}}])), :doc "Starts up a Bidi router based on Google Closure's 'History'\n\n  Types:\n\n    Location :- {:handler ...\n                 :route-params {...}}\n\n  Parameters:\n\n    routes :- a Bidi route structure\n    on-navigate :- 0-arg function, accepting a Location\n    default-location :- Location to default to if the current token doesn't match a route\n\n  Returns :- Router\n\n  Example usage:\n\n    (require '[bidi.router :as br])\n\n    (let [!location (atom nil)\n          router (br/start-router! [\"\" {\"/\" ::home-page\n                                          \"/page2\" ::page2}]\n                                   {:on-navigate (fn [location]\n                                                   (reset! !location location))\n                                    :default-location {:handler ::home-page}})]\n\n      ...\n\n      (br/set-location! router {:handler ::page2}))"}, :name bidi.router/start-router!, :variadic false, :file "resources/public/js/out/bidi/router.cljs", :end-column 20, :method-params ([routes p__47277]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([routes {:keys [on-navigate default-location], :or {on-navigate (constantly nil)}}])), :doc "Starts up a Bidi router based on Google Closure's 'History'\n\n  Types:\n\n    Location :- {:handler ...\n                 :route-params {...}}\n\n  Parameters:\n\n    routes :- a Bidi route structure\n    on-navigate :- 0-arg function, accepting a Location\n    default-location :- Location to default to if the current token doesn't match a route\n\n  Returns :- Router\n\n  Example usage:\n\n    (require '[bidi.router :as br])\n\n    (let [!location (atom nil)\n          router (br/start-router! [\"\" {\"/\" ::home-page\n                                          \"/page2\" ::page2}]\n                                   {:on-navigate (fn [location]\n                                                   (reset! !location location))\n                                    :default-location {:handler ::home-page}})]\n\n      ...\n\n      (br/set-location! router {:handler ::page2}))"}, t_bidi$router47306 {:num-fields 10, :protocols #{bidi.router/Router cljs.core/IMeta cljs.core/IWithMeta}, :name bidi.router/t_bidi$router47306, :file "resources/public/js/out/bidi/router.cljs", :type true, :anonymous true, :column 7, :line 71, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_bidi$router47306 {:protocol-inline nil, :meta {:anonymous true, :protocols #{bidi.router/Router cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([start-router! routes p__47277 map__47281 on-navigate default-location history token->location location->token meta47307])), :file nil}, :protocols #{bidi.router/Router cljs.core/IMeta cljs.core/IWithMeta}, :name bidi.router/->t_bidi$router47306, :variadic false, :file "resources/public/js/out/bidi/router.cljs", :method-params ([start-router! routes p__47277 map__47281 on-navigate default-location history token->location location->token meta47307]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 7, :factory :positional, :line 71, :max-fixed-arity 10, :fn-var true, :arglists (quote ([start-router! routes p__47277 map__47281 on-navigate default-location history token->location location->token meta47307])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_bidi$router47340 {:num-fields 10, :protocols #{bidi.router/Router cljs.core/IMeta cljs.core/IWithMeta}, :name bidi.router/t_bidi$router47340, :file "resources/public/js/out/bidi/router.cljs", :type true, :anonymous true, :column 7, :line 71, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_bidi$router47340 {:protocol-inline nil, :meta {:anonymous true, :protocols #{bidi.router/Router cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([start-router! routes p__47277 map__47318 on-navigate default-location history token->location location->token meta47341])), :file nil}, :protocols #{bidi.router/Router cljs.core/IMeta cljs.core/IWithMeta}, :name bidi.router/->t_bidi$router47340, :variadic false, :file "resources/public/js/out/bidi/router.cljs", :method-params ([start-router! routes p__47277 map__47318 on-navigate default-location history token->location location->token meta47341]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 7, :factory :positional, :line 71, :max-fixed-arity 10, :fn-var true, :arglists (quote ([start-router! routes p__47277 map__47318 on-navigate default-location history token->location location->token meta47341])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{location->token on-navigate meta47341 routes :or :params :default-location map__47281 :route-params token->location :keys history default-location start-router! meta47307 p__47277 quote :arglists :doc :on-navigate :handler constantly map__47318}, :order [:on-navigate :default-location :handler :route-params :params start-router! :arglists :doc quote routes :keys :or on-navigate default-location constantly p__47277 map__47281 history token->location location->token meta47307 map__47318 meta47341]}, :doc nil}